{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","useEffect","a","axios","get","barChartData","console","log","length","h","padding","xScale","d3","domain","Date","d","range","w","yScale","svg","append","attr","selectAll","enter","i","text","xAxis","yAxis","call","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRA4FeA,MAvFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KA+Eb,OA3EAC,oBAAS,sBAAC,4BAAAC,EAAA,+EAEqBC,IAAMC,IAAI,4FAF/B,OAEAC,EAFA,OAGNL,EAAQK,EAAaN,KAAKA,MAC1BO,QAAQC,IAAIF,EAAaN,KAAKA,MAJxB,gDAMNO,QAAQC,IAAI,gDAAZ,MANM,yDAQP,IAEHN,qBAAU,WACR,GAAIF,EAAKS,OAAQ,CACf,IACMC,EAAI,IACJC,EAAU,GAEVC,EAASC,MACZC,OAAO,CAAC,IAAIC,KAAKF,IAAOb,GAAM,SAACgB,GAAD,OAAOA,EAAE,OAAM,IAAID,KAAKF,IAAOb,GAAM,SAACgB,GAAD,OAAOA,EAAE,SAC5EC,MAAM,CAACN,EAASO,OAInBX,QAAQC,IAAI,aAAcK,IAAOb,GAAM,SAACgB,GAAD,OAAOA,EAAE,OAChDT,QAAQC,IAAI,aAAcK,IAAOb,GAAM,SAACgB,GAAD,OAAOA,EAAE,OAGhD,IAAMG,EAASN,MACZC,OAAO,CAAC,EAAGD,IAAOb,GAAM,SAACgB,GAAD,OAAOA,EAAE,QACjCC,MAAM,CAACP,IAAaC,IAEjBS,EAAMP,IAAU,UACnBQ,OAAO,OACPC,KAAK,QApBE,MAqBPA,KAAK,SAAUZ,GAElBU,EAAIG,UAAU,QACXvB,KAAKA,GACLwB,QACAH,OAAO,QACPC,KAAK,KAAK,SAACN,EAAGS,GAAJ,OAAc,EAAJA,EAAQd,KAC5BW,KAAK,KAAK,SAACN,GAAD,OAAQN,EAAIM,EAAE,GAAK,GAAML,KACnCW,KAAK,QAAS,GACdA,KAAK,UAAU,SAACN,GAAD,OAAOA,EAAE,GAAK,MAC7BM,KAAK,QAAS,OACdA,KAAK,aAAa,SAACN,GAAD,OAAOA,EAAE,MAC3BM,KAAK,YAAY,SAACN,GAAD,OAAOA,EAAE,MAC1BK,OAAO,SACPC,KAAK,KAAM,WACXA,KAAK,WAAY,aACjBI,MAAK,SAACV,GAAD,gBAAUA,EAAE,GAAZ,cAAoBA,EAAE,GAAtB,SAGR,IAAMW,EAAQd,IAAcD,GACtBgB,EAAQf,IAAYM,GAE1BC,EAAIC,OAAO,KACRC,KAAK,KAAM,UACXA,KAAK,YAAa,oBAClBO,KAAKF,GAERP,EAAIC,OAAO,KACRC,KAAK,KAAM,UACXA,KAAK,YAAa,mBAClBO,KAAKD,MAQT,CAAC5B,IAKF,sBAAK8B,UAAU,MAAf,UACE,oBAAIC,GAAG,QAAP,+BACA,qBAAKA,GAAG,cC3ECC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.29697273.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport * as d3 from 'd3';\n\nfunction App() {\n\n  const [data, setData] = useState([])\n\n  useEffect(async () => {\n    try {\n      const barChartData = await axios.get('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json')\n      setData(barChartData.data.data)\n      console.log(barChartData.data.data)\n    } catch (error) {\n      console.log('there was an error fetching bar chart data:\\n', error)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data.length) {\n      const w = 1200;\n      const h = 700;\n      const padding = 50;\n\n      const xScale = d3.scaleTime()\n        .domain([new Date(d3.min(data, (d) => d[0])), new Date(d3.max(data, (d) => d[0]))])\n        .range([padding, w - padding]);\n\n\n\n      console.log('min date: ', d3.min(data, (d) => d[0]))\n      console.log('max date: ', d3.max(data, (d) => d[0]))\n\n\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(data, (d) => d[1])])\n        .range([h - padding, padding]);\n\n      const svg = d3.select('#chart')\n        .append(\"svg\")\n        .attr(\"width\", w)\n        .attr(\"height\", h);\n\n      svg.selectAll(\"rect\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", (d, i) => i * 4 + padding)\n        .attr(\"y\", (d) => (h - d[1] / 30) - padding)\n        .attr(\"width\", 3)\n        .attr(\"height\", (d) => d[1] / 30)\n        .attr('class', 'bar')\n        .attr('data-date', (d) => d[0])\n        .attr('data-gdp', (d) => d[1])\n        .append(\"title\")\n        .attr('id', 'tooltip')\n        .attr('property', 'data-date')\n        .text((d) => `${d[0]}\\n$${d[1]} B`);\n\n\n      const xAxis = d3.axisBottom(xScale)\n      const yAxis = d3.axisLeft(yScale)\n\n      svg.append(\"g\")\n        .attr('id', 'x-axis')\n        .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr('id', 'y-axis')\n        .attr(\"transform\", \"translate(\" + padding + \",0)\")\n        .call(yAxis);\n    }\n\n\n\n\n\n\n  }, [data])\n\n\n\n  return (\n    <div className=\"App\">\n      <h1 id='title'>United States GDP</h1>\n      <div id='chart'></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}